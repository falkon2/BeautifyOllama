name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  test-and-build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            target: ''
          - platform: 'ubuntu-latest'
            target: ''
          - platform: 'windows-latest'
            target: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm install

      - name: Build the app (macOS)
        if: matrix.platform == 'macos-latest'
        run: npm run tauri build -- --target universal-apple-darwin

      - name: Rename macOS artifacts
        if: matrix.platform == 'macos-latest'
        run: |
          echo "=== Renaming macOS artifacts to simple names ==="
          # Find and rename DMG files
          find src-tauri/target/universal-apple-darwin/release/bundle -name "*.dmg" -exec cp {} BeautifyOllama.dmg \; 2>/dev/null || echo "No DMG found in universal target"
          find src-tauri/target/release/bundle -name "*.dmg" -exec cp {} BeautifyOllama.dmg \; 2>/dev/null || echo "No DMG found in release target"
          # List what we created
          ls -la BeautifyOllama.dmg 2>/dev/null || echo "No BeautifyOllama.dmg created"

      - name: Debug macOS artifacts
        if: matrix.platform == 'macos-latest'
        run: |
          echo "=== Checking for macOS build artifacts ==="
          find src-tauri/target -name "*.dmg" -o -name "*.app" -o -name "*.pkg" 2>/dev/null || echo "No artifacts found with common extensions"
          echo "=== Directory structure ==="
          ls -la src-tauri/target/ || echo "target directory not found"
          ls -la src-tauri/target/universal-apple-darwin/ 2>/dev/null || echo "universal-apple-darwin directory not found"
          ls -la src-tauri/target/universal-apple-darwin/release/ 2>/dev/null || echo "universal-apple-darwin/release directory not found"
          ls -la src-tauri/target/universal-apple-darwin/release/bundle/ 2>/dev/null || echo "universal-apple-darwin/release/bundle directory not found"
          ls -la src-tauri/target/release/ 2>/dev/null || echo "release directory not found"
          ls -la src-tauri/target/release/bundle/ 2>/dev/null || echo "release/bundle directory not found"

      - name: Build the app (Windows/Linux)
        if: matrix.platform != 'macos-latest'
        run: npm run tauri build

      - name: Rename Windows artifacts
        if: matrix.platform == 'windows-latest'
        run: |
          echo "=== Renaming Windows artifacts to simple names ==="
          # Find and rename Windows executables/installers
          find src-tauri/target/release/bundle -name "*.msi" -exec cp {} BeautifyOllama.msi \; 2>/dev/null || echo "No MSI found"
          find src-tauri/target/release/bundle -name "*.exe" -exec cp {} BeautifyOllama.exe \; 2>/dev/null || echo "No EXE found"
          # List what we created
          ls -la BeautifyOllama.* 2>/dev/null || echo "No renamed files created"

      - name: Rename Linux artifacts
        if: matrix.platform == 'ubuntu-latest'
        run: |
          echo "=== Renaming Linux artifacts to simple names ==="
          # Find and rename Linux packages
          find src-tauri/target/release/bundle -name "*.deb" -exec cp {} BeautifyOllama.deb \; 2>/dev/null || echo "No DEB found"
          find src-tauri/target/release/bundle -name "*.AppImage" -exec cp {} BeautifyOllama.AppImage \; 2>/dev/null || echo "No AppImage found"
          # List what we created
          ls -la BeautifyOllama.* 2>/dev/null || echo "No renamed files created"

      - name: Upload artifacts (windows only)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            BeautifyOllama.*
            src-tauri/target/release/bundle/

      - name: Upload artifacts (macos)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            BeautifyOllama.*
            src-tauri/target/universal-apple-darwin/release/bundle/
            src-tauri/target/release/bundle/
          if-no-files-found: warn

      - name: Upload artifacts (linux)
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            BeautifyOllama.*
            src-tauri/target/release/bundle/

  create-release:
    needs: test-and-build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create the release
          gh release create ${{ github.ref_name }} \
            --title "BeautifyOllama ${{ github.ref_name }}" \
            --notes "Download the appropriate installer for your platform:
          
          - **Windows**: .msi or .exe file
          - **macOS**: .dmg file
          - **Linux**: .deb package or .AppImage portable app"

          # Upload all artifacts with simple names first
          find artifacts -type f \( -name "BeautifyOllama.msi" -o -name "BeautifyOllama.exe" -o -name "BeautifyOllama.dmg" -o -name "BeautifyOllama.deb" -o -name "BeautifyOllama.AppImage" \) -exec gh release upload ${{ github.ref_name }} {} \;
          
          # Upload any remaining artifacts with original names as fallback
          find artifacts -type f \( -name "*.msi" -o -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.AppImage" \) ! \( -name "BeautifyOllama.*" \) -exec gh release upload ${{ github.ref_name }} {} \;
